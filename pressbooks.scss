$breakpoints: (
  'sm': 40rem,
  'md': 48rem,
  'lg': 64rem,
  'xl': 80rem,
  '2xl': 96rem,
);

$shadow-values: (
  '2xs': 0 1px rgb(0, 0, 0, 0.05),
  'xs': 0 1px 2px 0 rgb(0, 0, 0, 0.05),
  'sm': (0 1px 3px 0 rgb(0, 0, 0, 0.1),
    0 1px 2px -1px rgb(0, 0, 0, 0.1)),
  'md': (0 4px 6px -1px rgb(0, 0, 0, 0.1),
    0 2px 4px -2px rgb(0, 0, 0, 0.1)),
  'lg': (0 10px 15px -3px rgb(0, 0, 0, 0.1),
    0 4px 6px -4px rgb(0, 0, 0, 0.1)),
  'xl': (0 20px 25px -5px rgb(0, 0, 0, 0.1),
    0 8px 10px -6px rgb(0, 0, 0, 0.1)),
  '2xl': 0 25px 50px -12px rgb(0, 0, 0, 0.25),
  'inner': inset 0 2px 4px 0 rgb(0, 0, 0, 0.06),
  'none': 0 0 #0000,
);

$shadow-inset-values: (
  'xs': inset 0 1px 2px 0 rgb(0, 0, 0, 0.05),
  'sm': inset 0 1px 3px 0 rgb(0, 0, 0, 0.1),
  'none': inset 0 0 #0000,
);

$radius-values: (
  'none': 0,
  'xs': 0.125rem,
  'sm': 0.25rem,
  'md': 0.375rem,
  'lg': 0.5rem,
  'xl': 0.75rem,
  '2xl': 1rem,
  '3xl': 1.5rem,
  'full': calc(infinity * 1px),
);

$display-values: (
  'block': block,
  'inline': inline,
  'inline-block': inline-block,
  'flex': flex,
  'grid': grid,
  'none': none,
);

$justify-content-values: (
  'start': flex-start,
  'end': flex-end,
  'center': center,
  'between': space-between,
  'around': space-around,
  'evenly': space-evenly,
);

$align-items-values: (
  'start': flex-start,
  'end': flex-end,
  'center': center,
  'stretch': stretch,
  'baseline': baseline,
);

$text-align-values: (
  'left': left,
  'center': center,
  'right': right,
  'justify': justify,
  'start': start,
  'end': end,
);

$flex-direction-values: (
  'row': row,
  'row-reverse': row-reverse,
  'col': column,
  'col-reverse': column-reverse,
);

$unit-values: (
  '0': 0,
  '1': 0.25rem,
  '2': 0.5rem,
  '3': 0.75rem,
  '4': 1rem,
  '5': 1.25rem,
  '6': 1.5rem,
  '8': 2rem,
  '10': 2.5rem,
  '12': 3rem,
);

$pixel-values: (
  '0': 0,
  '1': 1px,
  '2': 2px,
  '4': 4px,
  '5': 5px,
  '6': 6px,
  '7': 7px,
  '8': 8px,
  '9': 9px,
  '10': 10px,
);

$overflow-values: (
  'auto': auto,
  'hidden': hidden,
  'visible': visible,
  'scroll': scroll,
);

$grid-cols-values: (
  '1': repeat(1, minmax(0, 1fr)),
  '2': repeat(2, minmax(0, 1fr)),
  '3': repeat(3, minmax(0, 1fr)),
  '4': repeat(4, minmax(0, 1fr)),
);

$pseudo-classes: (
  'hover': ':hover',
  'focus': ':focus',
  'active': ':active',
  'visited': ':visited',
  'focus-within': ':focus-within',
  'focus-visible': ':focus-visible',
);

$font-weight-values: (
  'thin': 100,
  'extralight': 200,
  'light': 300,
  'normal': 400,
  'medium': 500,
  'semibold': 600,
  'bold': 700,
  'extrabold': 800,
  'black': 900,
);

$blur-values: (
  'xs': blur(4px),
  'sm': blur(8px),
  'md': blur(16px),
  'lg': blur(24px),
  'xl': blur(40px),
  '2xl': blur(64px),
  '3xl': blur(96px),
  'none': none,
);

$cursor-values: (
  'auto': auto,
  'default': default,
  'pointer': pointer,
  'wait': wait,
  'text': text,
  'move': move,
  'not-allowed': not-allowed,
  'grab': grab,
  'grabbing': grabbing,
);

$transition-values: (
  'all': all cubic-bezier(0.4, 0, 0.2, 1) 300ms,
);

$transition-timing-values: (
  'linear': linear,
  'in': cubic-bezier(0.4, 0, 1, 1),
  'out': cubic-bezier(0, 0, 0.2, 1),
  'in-out': cubic-bezier(0.4, 0, 0.2, 1),
  'initial': initial,
);

$transition-unit-values: (
  '150': 150ms,
  '300': 300ms,
  '500': 500ms,
  '700': 700ms,
  '1000': 1000ms,
);

$list-style-values: (
  'none': none,
  'disc': disc,
  'circle': circle,
  'square': square,
  'decimal': decimal,
  'decimal-leading-zero': decimal-leading-zero,
  'lower-roman': lower-roman,
  'upper-roman': upper-roman,
  'lower-alpha': lower-alpha,
  'upper-alpha': upper-alpha,
);

$text-transform-values: (
  'uppercase': uppercase,
  'lowercase': lowercase,
  'capitalize': capitalize,
  'normal-case': none,
);

$colors: (
  'white': #fff,
  'learning-obj': #c5bdaa,
  'try-it': #3c2a21,
  'example': #eae8d7,
  'challenge-question': #eae8d7,
  'accordion': #f0f0f0,
  'transparent': transparent,
  'black': #000,
  'blur-box': #f9f9f9,
  'blur-text': #333,
);

$width-values: (
  "1-2": 50%,
  "1-3": 33.3333%,
  "2-3": 66.6667%,
  "1-4": 25%,
  "2-4": 50%,
  "3-4": 75%,
  "1-5": 20%,
  "2-5": 40%,
  "3-5": 60%,
  "4-5": 80%,
  "full": 100%,
  "auto": auto,
  "min": min-content,
  "max": max-content,
  "0": 0,
  "px": 1px,
  "0.5": 0.125rem,
  "1": 0.25rem,
  "2": 0.5rem,
  "4": 1rem,
  "8": 2rem,
  "10": 2.5rem,
  "16": 4rem,
  "32": 8rem,
  "96": 24rem
);

$height-values: (
  'min': min-content,
  'max': max-content,
  'fit': fit-content,
  '100': 100%,
  '90': 90%,
  '80': 80%,
  '70': 70%,
  '60': 60%,
  '50': 50%
);

$font-size-values: (
  'xs': 0.75rem,
  'sm': 0.875rem,
  'base': 1rem,
  'lg': 1.125rem,
  'xl': 1.25rem,
  '2xl': 1.5rem,
  '3xl': 1.875rem,
  '4xl': 2.25rem,
  '5xl': 3rem,
  '6xl': 3.75rem,
  '7xl': 4.5rem,
  '8xl': 6rem,
  '9xl': 8rem,
);

//  NOTE: the php-sass compiler automatically removes backslashes from its output,
// so we need to double-escape the double backslash
$important-suffix: "\\\\!";

@mixin generate-utilities($property-prefix, $property, $values) {
  @each $name, $value in $values {
    .#{$property-prefix}-#{$name} {
      @if type-of($property) == 'list' {
        @each $prop in $property {
          #{$prop}: $value;
        }
      } @else {
        #{$property}: $value;
      }
    }

    .#{$property-prefix}-#{$name}#{$important-suffix} {
      @if type-of($property) == 'list' {
        @each $prop in $property {
          #{$prop}: $value !important;
        }
      } @else {
        #{$property}: $value !important;
      }
    }

    @each $breakpoint-key, $breakpoint-value in $breakpoints {
      .#{$breakpoint-key}\\:#{$property-prefix}-#{$name} {
        @media (min-width: $breakpoint-value) {
          @if type-of($property) == 'list' {
            @each $prop in $property {
              #{$prop}: $value;
            }
          } @else {
            #{$property}: $value;
          }
        }
      }

      .#{$breakpoint-key}\\:#{$property-prefix}-#{$name}#{$important-suffix} {
        @media (min-width: $breakpoint-value) {
          @if type-of($property) == 'list' {
            @each $prop in $property {
              #{$prop}: $value !important;
            }
          } @else {
            #{$property}: $value !important;
          }
        }
      }
    }

    @each $pseudo-key, $pseudo-value in $pseudo-classes {
      .#{$pseudo-key}\\:#{$property-prefix}-#{$name} {
        &#{$pseudo-value} {
          @if type-of($property) == 'list' {
            @each $prop in $property {
              #{$prop}: $value;
            }
          } @else {
            #{$property}: $value;
          }
        }
      }

      .#{$pseudo-key}\\:#{$property-prefix}-#{$name}#{$important-suffix} {
        &#{$pseudo-value} {
          @if type-of($property) == 'list' {
            @each $prop in $property {
              #{$prop}: $value !important;
            }
          } @else {
            #{$property}: $value !important;
          }
        }
      }

      @each $breakpoint-key, $breakpoint-value in $breakpoints {
        .#{$breakpoint-key}\\:#{$pseudo-key}\\:#{$property-prefix}-#{$name}:#{$pseudo-key} {
          @media (min-width: $breakpoint-value) {
            @if type-of($property) == 'list' {
              @each $prop in $property {
                #{$prop}: $value;
              }
            } @else {
              #{$property}: $value;
            }
          }
        }

        .#{$breakpoint-key}\\:#{$pseudo-key}\\:#{$property-prefix}-#{$name}#{$important-suffix}:#{$pseudo-key} {
          @media (min-width: $breakpoint-value) {
            @if type-of($property) == 'list' {
              @each $prop in $property {
                #{$prop}: $value !important;
              }
            } @else {
              #{$property}: $value !important;
            }
          }
        }
      }
    }
  }
}

@include generate-utilities('display', 'display', $display-values);
@include generate-utilities('justify', 'justify-content', $justify-content-values);
@include generate-utilities('grid-cols', 'grid-template-columns', $grid-cols-values);
@include generate-utilities('align', 'align-items', $align-items-values);
@include generate-utilities('flex', 'flex-direction', $flex-direction-values);
@include generate-utilities('m', 'margin', $unit-values);
@include generate-utilities('mx', 'margin-inline', $unit-values);
@include generate-utilities('my', 'margin-block', $unit-values);
@include generate-utilities('mb', 'margin-bottom', $unit-values);
@include generate-utilities('mt', 'margin-top', $unit-values);
@include generate-utilities('ml', 'margin-left', $unit-values);
@include generate-utilities('mr', 'margin-right', $unit-values);
@include generate-utilities('p', 'padding', $unit-values);
@include generate-utilities('pb', 'padding-bottom', $unit-values);
@include generate-utilities('pt', 'padding-top', $unit-values);
@include generate-utilities('pl', 'padding-left', $unit-values);
@include generate-utilities('pr', 'padding-right', $unit-values);
@include generate-utilities('px', 'padding-inline', $unit-values);
@include generate-utilities('py', 'padding-block', $unit-values);
@include generate-utilities('gap', 'gap', $unit-values);
@include generate-utilities('gap-x', 'column-gap', $unit-values);
@include generate-utilities('gap-y', 'row-gap', $unit-values);
@include generate-utilities('indent', 'text-indent', $unit-values);
@include generate-utilities('border', 'border-width', $pixel-values);
@include generate-utilities('border-r', 'border-right-width', $pixel-values);
@include generate-utilities('border-l', 'border-left-width', $pixel-values);
@include generate-utilities('border-b', 'border-bottom-width', $pixel-values);
@include generate-utilities('border-t', 'border-top-width', $pixel-values);
@include generate-utilities('border-color', 'border-color', $colors);
@include generate-utilities('rounded', 'border-radius', $radius-values);
@include generate-utilities('rounded-t', ('border-top-left-radius', 'border-top-right-radius'), $radius-values);
@include generate-utilities('rounded-r', ('border-top-right-radius', 'border-bottom-right-radius'), $radius-values);
@include generate-utilities('rounded-l', ('border-top-left-radius', 'border-bottom-left-radius'), $radius-values);
@include generate-utilities('rounded-b', ('border-bottom-left-radius', 'border-bottom-right-radius'), $radius-values);
@include generate-utilities('shadow', 'box-shadow', $shadow-values);
@include generate-utilities('inset-shadow', 'box-shadow', $shadow-inset-values);
@include generate-utilities('font', 'font-weight', $font-weight-values);
@include generate-utilities('text', 'text-align', $text-align-values);
@include generate-utilities('text', 'font-size', $font-size-values);
@include generate-utilities('text', 'text-transform', $text-transform-values);
@include generate-utilities('blur', 'filter', $blur-values);
@include generate-utilities('cursor', 'cursor', $cursor-values);
@include generate-utilities('transition', 'transition', $transition-values);
@include generate-utilities('duration', 'transition-duration', $transition-unit-values);
@include generate-utilities('delay', 'transition-delay', $transition-unit-values);
@include generate-utilities('ease', 'transition-timing-function', $transition-values);
@include generate-utilities('list', 'list-style-type', $list-style-values);
@include generate-utilities('overflow', 'overflow', $overflow-values);
@include generate-utilities('overflow-x', 'overflow-x', $overflow-values);
@include generate-utilities('overflow-y', 'overflow-y', $overflow-values);
@include generate-utilities('color', 'color', $colors);
@include generate-utilities('background', 'background-color', $colors);
@include generate-utilities('w', 'width', $width-values);
@include generate-utilities('h', 'height', $height-values);
@include generate-utilities('pos', 'position', ('static': static, 'relative': relative, 'absolute': absolute, 'fixed': fixed, 'sticky': sticky));
@include generate-utilities('top', 'top', $unit-values);
@include generate-utilities('right', 'right', $unit-values);
@include generate-utilities('bottom', 'bottom', $unit-values);
@include generate-utilities('left', 'left', $unit-values);
/* Global Styles */

*,
:after,
:before,
::backdrop {
  box-sizing: border-box;
  border: 0 solid;
  margin: 0;
  padding: 0;
}

//  NOTE: Increase the `font-size` of mathjax fraction element
.mjx-mfrac {
  font-size: 1.5rem;
}
